{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Router from \"next/router\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\n\nvar _require = require(\"react\"),\n    useState = _require.useState;\n\nexport default function ShareRecipe() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  function submit(event) {\n    return _regeneratorRuntime.async(function submit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/api/recipes\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                message: message\n              })\n            }));\n\n          case 3:\n            Router.push(\"/\");\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return __jsx(Container, null, __jsx(Paper, {\n    elevation: 3\n  }, __jsx(\"form\", {\n    onSubmit: submit\n  }, __jsx(TextField, {\n    placeholder: \"What's your recipe?\",\n    onChange: function onChange(e) {\n      return setMessage(e.target.value);\n    },\n    value: message\n  }), __jsx(Button, {\n    variant: \"outlined\",\n    type: \"submit\"\n  }, \"Share\"))));\n}","map":{"version":3,"sources":["/home/ubuntu/recipesharer/src/pages/create-recipe.js"],"names":["Router","TextField","Container","Button","Paper","require","useState","ShareRecipe","message","setMessage","submit","event","preventDefault","fetch","method","headers","body","JSON","stringify","push","e","target","value"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;eAEqBC,OAAO,CAAC,OAAD,C;IAApBC,Q,YAAAA,Q;;AAER,eAAe,SAASC,WAAT,GAAuB;AAAA,kBACND,QAAQ,CAAC,EAAD,CADF;AAAA;AAAA,MAC7BE,OAD6B;AAAA,MACpBC,UADoB;;AAGpC,WAAeC,MAAf,CAAsBC,KAAtB;AAAA;AAAA;AAAA;AAAA;AACEA,YAAAA,KAAK,CAACC,cAAN;AADF;AAAA,6CAEQC,KAAK,CAAC,cAAD,EAAiB;AAC1BC,cAAAA,MAAM,EAAE,MADkB;AAE1BC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFiB;AAK1BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,gBAAAA,OAAO,EAAPA;AADmB,eAAf;AALoB,aAAjB,CAFb;;AAAA;AAWER,YAAAA,MAAM,CAACmB,IAAP,CAAY,GAAZ;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAE;AAAlB,KACE;AAAM,IAAA,QAAQ,EAAET;AAAhB,KACE,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC,qBAAvB;AAA6C,IAAA,QAAQ,EAAE,kBAAAU,CAAC;AAAA,aAAIX,UAAU,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AAAA,KAAxD;AAAwF,IAAA,KAAK,EAAEd;AAA/F,IADF,EAEE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,IAAI,EAAC;AAAhC,aAFF,CADF,CADF,CADF;AAYD","sourcesContent":["import Router from \"next/router\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Container from \"@material-ui/core/Container\"\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\"\n\nconst { useState } = require(\"react\");\n\nexport default function ShareRecipe() {\n  const [message, setMessage] = useState(\"\");\n\n  async function submit(event) {\n    event.preventDefault();\n    await fetch(\"/api/recipes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    Router.push(\"/\");\n  }\n\n  return (\n    <Container>\n      <Paper elevation={3}>\n        <form onSubmit={submit}>\n          <TextField placeholder=\"What's your recipe?\" onChange={e => setMessage(e.target.value)} value={message} />\n          <Button variant=\"outlined\" type=\"submit\">\n            Share\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}